# character string literal value expression primary
>SELECT 'a' FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: literal['a']
   referenced tables:
     0: t1>
# national character string literal value expression primary
>SELECT N'motorček' FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: literal['motorček']
   referenced tables:
     0: t1>
# bit string literal value expression primary
>SELECT B'01000101101' FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: literal['01000101101']
   referenced tables:
     0: t1>
# hex string literal value expression primary
>SELECT X'FE1CD34A' FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: literal['FE1CD34A']
   referenced tables:
     0: t1>
# A simple scalar subquery
>SELECT (SELECT b FROM t2) FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: scalar-subquery[
<statement: SELECT
   selected columns:
     0: column-reference[b]
   referenced tables:
     0: t2>
]
   referenced tables:
     0: t1>
# named and dynamic parameters
>SELECT :name, :name_long, ? FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: parameter[name]
     1: parameter[name_long]
     2: parameter[?]
   referenced tables:
     0: t1>
# character value expression using collation
>SELECT 'ß' COLLATE utf8mb4_general_ci FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: literal['ß'] COLLATE utf8mb4_general_ci
   referenced tables:
     0: t1>
# character value expression using concatenation
>SELECT a || b FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: concatenate[column-reference[a], column-reference[b]]
   referenced tables:
     0: t1>
# character value expression using concatenation with some factors having a collation
>SELECT a || b COLLATE utf8_bin FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: concatenate[column-reference[a], column-reference[b] COLLATE utf8_bin]
   referenced tables:
     0: t1>
# SUBSTRING string function with no for length modifier
>SELECT SUBSTRING(a FROM 1) FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: substring[column-reference[a] FROM literal[1]]
   referenced tables:
     0: t1>
# SUBSTRING string function with a for length modifier
>SELECT SUBSTRING(a FROM 1 FOR 2) FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: substring[column-reference[a] FROM literal[1] FOR literal[2]]
   referenced tables:
     0: t1>
# UPPER and LOWER string functions
>SELECT UPPER(a), LOWER(a) FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: upper[column-reference[a]]
     1: lower[column-reference[a]]
   referenced tables:
     0: t1>
# TRANSLATE string function
>SELECT TRANSLATE(a USING utf8_bin) FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: translate[column-reference[a] USING utf8_bin]
   referenced tables:
     0: t1>
# CONVERT string function
>SELECT CONVERT(a USING utf8_bin) FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: convert[column-reference[a] USING utf8_bin]
   referenced tables:
     0: t1>
# TRIM string function with no trim specification or character
>SELECT TRIM(a) FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: trim[column-reference[a]]
   referenced tables:
     0: t1>
# TRIM string function with trim specifications
>SELECT TRIM(LEADING ' ' FROM a) FROM t1
OK
statements[0]:
  <statement: SELECT
   selected columns:
     0: trim[LEADING literal[' '] FROM column-reference[a]]
   referenced tables:
     0: t1>
